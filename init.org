#+BABEL: :cache yes
#+PROPERTY: header-args :tangle yes :comments org
#+TITLE: Emacs Configuration File
#+AUTHOR: Max Miorim

* Package management
  #+BEGIN_SRC emacs-lisp
    (require 'package)

    (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)

    (package-initialize)

    (unless (package-installed-p 'use-package)
      (package-refresh-contents)
      (package-install 'use-package))

    (require 'use-package)

    (setq use-package-always-ensure t)
  #+END_SRC

* exec-path-from-shell
  #+BEGIN_SRC emacs-lisp
    (use-package exec-path-from-shell
      :config (when (memq window-system '(mac ns))
                (exec-path-from-shell-initialize)))
  #+END_SRC

* EVIL
  #+BEGIN_SRC emacs-lisp
    (use-package evil
      :init   (setq evil-want-integration nil)
      :config (evil-mode 1))

    (use-package evil-collection
      :after  evil
      :config (evil-collection-init))

    (use-package evil-surround
      :after  evil
      :config (global-evil-surround-mode t))

    (use-package evil-leader
      :after  evil
      :config (global-evil-leader-mode))
  #+END_SRC

* Ivy
  #+BEGIN_SRC emacs-lisp
    (use-package ivy
      :init   (setq ivy-use-virtual-buffers t
                    ivy-count-format "(%d/%d) "
                    ivy-extra-directories nil)
      :config (ivy-mode t))

    (use-package ivy-hydra
      :after ivy)

    (use-package counsel
      :after ivy)
  #+END_SRC

* OSX
  #+BEGIN_SRC emacs-lisp
    (use-package osx-clipboard
      :config (osx-clipboard-mode t))
  #+END_SRC

* Themes
  #+BEGIN_SRC emacs-lisp
    (use-package gruvbox-theme
      :config (load-theme 'gruvbox t))
  #+END_SRC

* Status line
  #+BEGIN_SRC emacs-lisp
    (use-package telephone-line
      :config (telephone-line-mode t))
  #+END_SRC

* Code completion
  #+BEGIN_SRC emacs-lisp
    (use-package company
      :hook ((after-init . global-company-mode)
             (prog-mode . (lambda ()
                            (set (make-local-variable 'company-backends)
                                 '((company-dabbrev-code company-yasnippet)))))))
  #+END_SRC

* Rainbow parens
  #+BEGIN_SRC emacs-lisp
    (use-package rainbow-delimiters
      :hook (prog-mode . rainbow-delimiters-mode))
  #+END_SRC

* Project management
  #+BEGIN_SRC emacs-lisp
    (use-package projectile
      :after  ivy
      :init   (setq projectile-completion-system 'ivy)
      :config (projectile-mode t))
  #+END_SRC

* Syntax checking
  #+BEGIN_SRC emacs-lisp
    (use-package flycheck
      :hook (after-init . global-flycheck-mode))
  #+END_SRC

* Git
  #+BEGIN_SRC emacs-lisp
    (use-package magit)

    (use-package gitconfig-mode)

    (use-package gitattributes-mode)

    (use-package gitignore-mode)

    (use-package evil-magit
      :after evil)
  #+END_SRC

* Languages

** Clojure
   #+BEGIN_SRC emacs-lisp
    (use-package clojure-mode
      :init
      (add-hook 'clojure-mode-hook #'subword-mode)
      (add-hook 'clojure-mode-hook (lambda ()
                                     (define-clojure-indent
                                       (future-flow 1)
                                       (future-facts 1)
                                       (future-fact 1)
                                       (flow 1)
                                       (facts 1)
                                       (fact 1)
                                       (as-customer 1)
                                       (as-delegate 2)
                                       (as-of 1)
                                       (assoc-if 1)
                                       (assoc 1)
                                       (let-entities 2)
                                       (constraint-fn 2)
                                       (provided 0)
                                       (with-fn-validation 0)
                                       (system-map 0)
                                       (tabular 0)))))

    (use-package clj-refactor
      :hook ((clojure-mode cider-mode) . clj-refactor-mode))

    (use-package cider
      :init
      (setq cider-prompt-for-symbol nil
            cider-save-file-on-load t
            cider-font-lock-dynamically '(macro core function var)
            cider-eldoc-display-context-dependent-info t
            cider-repl-pop-to-buffer-on-connect nil
            cider-overlays-use-font-lock t
            cider-pprint-fn "puget")
      (add-hook 'cider-mode-hook #'eldoc-mode)
      (add-hook 'cider-mode-hook #'cider-company-enable-fuzzy-completion)
      (add-hook 'cider-repl-mode-hook #'eldoc-mode)
      (add-hook 'cider-repl-mode-hook #'cider-company-enable-fuzzy-completion)
      (add-hook 'cider-repl-mode-hook #'subword-mode))

    (evil-define-key '(normal visual) clojure-mode-map
      "cc"   'cider-connect
      "cji"  'cider-jack-in
      "crcl" 'clojure-convert-collection-to-list
      "crcm" 'clojure-convert-collection-to-map
      "crcq" 'clojure-convert-collection-to-quoted-list
      "crcs" 'clojure-convert-collection-to-set
      "crcv" 'clojure-convert-collection-to-vector
      "crcp" 'clojure-cycle-privacy
      "crci" 'clojure-cycle-if
      "cril" 'clojure-introduce-let
      "crml" 'clojure-move-to-let
      "crtf" 'clojure-thread-first-all
      "crth" 'clojure-thread
      "crtl" 'clojure-thread-last-all
      "crua" 'clojure-unwind-all
      "cruw" 'clojure-unwind
      "crad" 'cljr-add-declaration
      "crai" 'cljr-add-import-to-ns
      "crar" 'cljr-add-require-to-ns
      "crau" 'cljr-add-use-to-ns
      "crdk" 'cljr-destructure-keys
      "crec" 'cljr-extract-constant
      "cred" 'cljr-extract-def
      "crel" 'cljr-expand-let
      "crfe" 'cljr-create-fn-from-example
      "crmf" 'cljr-move-form
      "crpc" 'cljr-project-clean
      "crpf" 'cljr-promote-function
      "crsc" 'cljr-show-changelog
      "crsp" 'cljr-sort-project-dependencies
      "crsr" 'cljr-stop-referring
      "crup" 'cljr-update-project-dependencies)

    (evil-define-key '(normal visual) cider-mode-map
      "clb"  'cider-load-buffer
      "clf"  'cider-load-file
      "claf" 'cider-load-all-files
      "clap" 'cider-load-all-project-ns
      "cram" 'cljr-add-missing-libspec
      "crap" 'cljr-add-project-dependency
      "cras" 'cljr-add-stubs
      "crcn" 'cljr-clean-ns
      "cref" 'cljr-extract-function
      "crfu" 'cljr-find-usages
      "crhd" 'cljr-hotload-dependency
      "cris" 'cljr-inline-symbol
      "crrf" 'cljr-rename-file-or-dir
      "crrl" 'cljr-remove-let
      "crrs" 'cljr-rename-symbol)
   #+END_SRC

** Scala
   #+BEGIN_SRC emacs-lisp
    (use-package ensime)
   #+END_SRC

** Dart
   #+BEGIN_SRC emacs-lisp
    (use-package dart-mode
      :init
      (setq dart-sdk-path "/usr/local/flutter/bin/cache/dart-sdk/"
            dart-enable-analysis-server t))
   #+END_SRC

* Misc
  - Hide unnecessary stuff
  #+BEGIN_SRC emacs-lisp
    (menu-bar-mode 0)
    (tool-bar-mode 0)
    (scroll-bar-mode 0)
    (setq inhibit-startup-message t)
    (setq initial-scratch-message nil)
  #+END_SRC

  - Graphical tweaks
  #+BEGIN_SRC emacs-lisp
    (when (window-system)
      (set-frame-font "Fira Code"))
  #+END_SRC

  - Disable bell
  #+BEGIN_SRC emacs-lisp
    (setq ring-bell-function 'ignore)
  #+END_SRC

  - Disable lock files
  #+BEGIN_SRC emacs-lisp
    (setq create-lockfiles nil)
  #+END_SRC

  - Disable backup files
  #+BEGIN_SRC emacs-lisp
    (setq make-backup-files nil)
  #+END_SRC

  - Use y/n prompts instead of yes/no
  #+BEGIN_SRC emacs-lisp
    (defalias 'yes-or-no-p 'y-or-n-p)
  #+END_SRC

  - Show line numbers
  #+BEGIN_SRC emacs-lisp
    (global-display-line-numbers-mode t)
    (setq-default display-line-numbers-grow-only t
                  display-line-numbers-widen t
                  display-line-numbers-width 2
                  display-line-numbers-type 'relative)
  #+END_SRC

  - Highlight current line
  #+BEGIN_SRC emacs-lisp
    (global-hl-line-mode t)
  #+END_SRC

  - Smart tabs (indent or complete)
  #+BEGIN_SRC emacs-lisp
    (setq tab-always-indent 'complete)
  #+END_SRC

  - Ensure new line at EOF
  #+BEGIN_SRC emacs-lisp
    (setq require-final-newline t)
  #+END_SRC

  - Mouse
  #+BEGIN_SRC emacs-lisp
    (unless window-system
      ;; Enable mouse
      (xterm-mouse-mode t)

      ;; Set up scroll wheel
      (global-set-key [mouse-4] (lambda ()
                                  (interactive)
                                  (scroll-down 1)))
      (global-set-key [mouse-5] (lambda ()
                                  (interactive)
                                  (scroll-up 1)))

      ;; Enable mouse selection
      (setq mouse-sel-mode t))
  #+END_SRC

  - Write emacs's custom settings to its own file
  #+BEGIN_SRC emacs-lisp
    (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
    (when (file-exists-p custom-file)
      (load custom-file))
  #+END_SRC

  - Disable soft line wrapping
  #+BEGIN_SRC emacs-lisp
    (setq-default truncate-lines 0)
  #+END_SRC

  - Remember last position on files
  #+BEGIN_SRC emacs-lisp
    (save-place-mode t)
  #+END_SRC

  - Leader key
  #+BEGIN_SRC emacs-lisp
    (evil-leader/set-leader ",")

    (evil-leader/set-key
      "mx" 'counsel-M-x
      "o"  'counsel-fzf
      "f"  'counsel-ag
      "r"  'counsel-recentf
      "b"  'ivy-switch-buffer
      "B"  'ivy-switch-buffer-other-window
      "s"  'cider-scratch)
  #+END_SRC

  - Show matching parens
  #+BEGIN_SRC emacs-lisp
    (show-paren-mode t)
  #+END_SRC

  - Default indentation
  #+BEGIN_SRC emacs-lisp
    (setq-default indent-tabs-mode nil
                  tab-width 2
                  c-basic-offset 2)
  #+END_SRC

  - Show trailing whitespace
  #+BEGIN_SRC emacs-lisp
    (setq show-trailing-whitespace t)
  #+END_SRC

  - Ivy action to open file in other window
  #+BEGIN_SRC emacs-lisp
    (ivy-set-actions
     'counsel-fzf
     '(("O" find-file-other-window "other window")))
  #+END_SRC
