#+BABEL: :cache yes
#+PROPERTY: header-args :tangle yes :comments org
#+TITLE: Emacs Configuration File
#+AUTHOR: Max Miorim

* Package management
  #+BEGIN_SRC emacs-lisp
    (require 'package)

    (add-to-list 'package-archives '("melpa-stable" . "https://stable.melpa.org/packages/") t)
    (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)

    (package-initialize)

    (unless (package-installed-p 'use-package)
      (package-refresh-contents)
      (package-install 'use-package))

    (require 'use-package)

    (setq use-package-always-ensure t)
  #+END_SRC

* exec-path-from-shell
  #+BEGIN_SRC emacs-lisp
    (use-package exec-path-from-shell
      :pin    melpa-stable
      :init   (setq exec-path-from-shell-check-startup-files nil
                    exec-path-from-shell-variables '("PATH"
                                                     "MANPATH"
                                                     "HOME"
                                                     "TMPDIR"
                                                     "SSH_AUTH_SOCK"
                                                     "GPG_TTY"
                                                     "JAVA_HOME"
                                                     "GRAALVM_HOME"
                                                     "LEIN_SUPPRESS_USER_LEVEL_REPO_WARNINGS"
                                                     "LEIN_USE_BOOTCLASSPATH"
                                                     "LEIN_FAST_TRAMPOLINE"
                                                     "FLUTTER_ROOT"
                                                     "GOPATH"
                                                     "GOROOT"))
      :config (exec-path-from-shell-initialize))
  #+END_SRC

* EVIL
  #+BEGIN_SRC emacs-lisp
    (use-package evil
      :pin    melpa-stable
      :init   (setq evil-want-integration nil
                    evil-want-keybinding nil
                    evil-search-module 'evil-search
                    evil-vsplit-window-right t
                    evil-split-window-below t)
      :config (evil-mode 1))

    (use-package evil-collection
      :pin    melpa-stable
      :after  evil
      :config (evil-collection-init))

    (use-package evil-surround
      :pin    melpa-stable
      :after  evil
      :config (global-evil-surround-mode t))

    (use-package evil-leader
      :pin    melpa-stable
      :after  evil
      :config (global-evil-leader-mode))

    (use-package evil-search-highlight-persist
      :pin    melpa
      :after  evil
      :config (global-evil-search-highlight-persist t))
  #+END_SRC

* Ivy
  #+BEGIN_SRC emacs-lisp
    (use-package ivy
      :pin    melpa-stable
      :init   (setq ivy-use-virtual-buffers t
                    ivy-count-format "(%d/%d) "
                    ivy-extra-directories nil
                    ivy-initial-inputs-alist nil)
      :config (ivy-mode t))

    (use-package ivy-hydra
      :pin   melpa-stable
      :after ivy)

    (use-package counsel
      :pin   melpa-stable
      :after ivy)
  #+END_SRC

* OSX
  #+BEGIN_SRC emacs-lisp
    (use-package osx-clipboard
      :pin    melpa-stable
      :config (osx-clipboard-mode t))

    (add-to-list 'default-frame-alist '(ns-transparent-titlebar . t))
    (add-to-list 'default-frame-alist '(ns-appearance . dark))
    (add-to-list 'default-frame-alist '(fullscreen . maximized))
  #+END_SRC

* Themes
  #+BEGIN_SRC emacs-lisp
    (use-package gruvbox-theme
      :pin    melpa-stable
      :config (load-theme 'gruvbox t))
  #+END_SRC

* Status line
  #+BEGIN_SRC emacs-lisp
    (use-package telephone-line
      :pin    melpa
      :config (telephone-line-mode t))
  #+END_SRC

* Code completion
  #+BEGIN_SRC emacs-lisp
    (use-package company
      :pin  melpa-stable
      :hook ((after-init . global-company-mode)
             (prog-mode . (lambda ()
                            (set (make-local-variable 'company-backends)
                                 '((company-dabbrev-code company-yasnippet)))))))
  #+END_SRC

  #+BEGIN_SRC emacs-lisp
    (use-package company-lsp
      :pin    melpa-stable
      :after  '(company lsp)
      :config (add-to-list 'company-backends 'company-lsp))
  #+END_SRC

* Rainbow parens
  #+BEGIN_SRC emacs-lisp
    (use-package rainbow-delimiters
      :pin  melpa-stable
      :hook (prog-mode . rainbow-delimiters-mode))
  #+END_SRC

* Project management
  #+BEGIN_SRC emacs-lisp
    (use-package projectile
      :pin    melpa-stable
      :init   (setq projectile-completion-system 'ivy
                    projectile-project-search-path '("~/dev"))
      :config (projectile-mode t))
  #+END_SRC

  #+BEGIN_SRC emacs-lisp
    (evil-leader/set-key
      "po" 'projectile-switch-project
      "ps" 'projectile-switch-open-project)
  #+END_SRC

* Syntax checking
  #+BEGIN_SRC emacs-lisp
    (use-package flycheck
      :pin  melpa-stable
      :hook (after-init . global-flycheck-mode))
  #+END_SRC

  Show errors in popups at point:

  #+BEGIN_SRC emacs-lisp
    (use-package flycheck-pos-tip
      :pin   melpa-stable
      :after flycheck
      :hook  (flycheck-mode . flycheck-pos-tip-mode))
  #+END_SRC

* Spell checking
  #+BEGIN_SRC emacs-lisp
    (use-package flyspell
      :pin  melpa-stable
      :hook ((after-init . flyspell-mode)
             (prog-mode . flyspell-prog-mode)))
  #+END_SRC

* Git
  #+BEGIN_SRC emacs-lisp
    (use-package magit
      :pin melpa-stable)

    (use-package gitconfig-mode
      :pin melpa-stable)

    (use-package gitattributes-mode
      :pin melpa-stable)

    (use-package gitignore-mode
      :pin melpa-stable)

    (use-package evil-magit
      :pin   melpa-stable
      :after evil)
  #+END_SRC

* Org mode
  #+BEGIN_SRC emacs-lisp
    (setq org-src-tab-acts-natively t)
    (setq org-src-fontify-natively t)
  #+END_SRC

* smartparens
  #+BEGIN_SRC emacs-lisp
    (use-package smartparens
      :pin     melpa-stable
      :config (show-smartparens-global-mode t)
      :hook   (prog-mode . turn-on-smartparens-strict-mode))

    (use-package evil-smartparens
      :pin     melpa-stable
      :after smartparens
      :hook  (smartparens-mode . evil-smartparens-mode))

    (evil-define-key '(normal visual) smartparens-mode-map
      "ts" 'sp-transpose-sexp
      "tl" 'transpose-lines
      "tw" 'transpose-words
      "tc" 'transpose-chars
      ">)" 'sp-forward-barf-sexp
      "<(" 'sp-backward-barf-sexp
      "<)" 'sp-forward-slurp-sexp
      ">(" 'sp-backward-slurp-sexp)
  #+END_SRC

* Programming Languages

** All
   #+BEGIN_SRC emacs-lisp
     (add-hook 'prog-mode-hook #'eldoc-mode)
   #+END_SRC

   #+BEGIN_SRC emacs-lisp
     (use-package eval-sexp-fu
       :pin  melpa-stable
       :hook (prog-mode . eval-sexp-fu-flash-mode))
   #+END_SRC

   #+BEGIN_SRC emacs-lisp
     (use-package lsp-mode
       :pin  melpa-stable
       :init (setq lsp-auto-guess-root t)
       :hook (dart-mode . lsp))
   #+END_SRC

** Clojure
   #+BEGIN_SRC emacs-lisp
     (use-package clojure-mode
       :pin melpa-stable
       :init
       (add-to-list 'projectile-project-root-files-bottom-up "project.clj")
       (add-to-list 'projectile-project-root-files-bottom-up "deps.edn")
       (add-hook 'clojure-mode-hook #'subword-mode)
       (add-hook 'clojure-mode-hook (lambda ()
                                      (define-clojure-indent
                                        (against-backgroud 0)
                                        (against-background 0)
                                        (as-admin 1)
                                        (as-customer 1)
                                        (as-customer-with-lift 1)
                                        (as-delegate 2)
                                        (as-delegate-with-lift 2)
                                        (as-of 1)
                                        (assoc 1)
                                        (assoc-if 1)
                                        (assoc-in-if 1)
                                        (constraint-fn 2)
                                        (consume! 0)
                                        (data-fn 1)
                                        (defhandler 2)
                                        (defint 0)
                                        (defuf 1)
                                        (embeds 0)
                                        (expand-routes 0)
                                        (fact 1)
                                        (facts 1)
                                        (flow 1)
                                        (flow-as-of 1)
                                        (flow-without-validation 1)
                                        (for-all 1)
                                        (future-fact 1)
                                        (future-facts 1)
                                        (idempotent-start 1)
                                        (idempotent-stop 1)
                                        (ignore-conflict 0)
                                        (let-entities 2)
                                        (let-flow 1)
                                        (log-messages 0)
                                        (logged-call 1)
                                        (non-test-action 0)
                                        (profile 2)
                                        (profiled 1)
                                        (provided 0)
                                        (quick-check 1)
                                        (rethrow 1)
                                        (run-recipe 0)
                                        (some-with-open 1)
                                        (system-map 0)
                                        (tabular 0)
                                        (try-type 0)
                                        (with-cid 1)
                                        (with-fn-validation 0)
                                        (with-responses 0)
                                        (with-scopes 1)))))

     (use-package clj-refactor
       :pin  melpa-stable
       :init (setq cljr-warn-on-eval nil)
       :hook ((clojure-mode cider-mode) . clj-refactor-mode))


     (use-package cider
       :pin melpa-stable
       :init
       (setq cider-prompt-for-symbol nil
             cider-save-file-on-load t
             cider-font-lock-dynamically '(macro core function var)
             cider-eldoc-display-context-dependent-info t
             cider-repl-pop-to-buffer-on-connect nil
             cider-overlays-use-font-lock t)
       (add-hook 'cider-mode-hook #'cider-company-enable-fuzzy-completion)
       (add-hook 'cider-repl-mode-hook #'cider-company-enable-fuzzy-completion)
       (add-hook 'cider-repl-mode-hook #'subword-mode)
       (add-hook 'cider-repl-mode-hook #'visual-line-mode))
   #+END_SRC

   #+BEGIN_SRC emacs-lisp
     (use-package cider-eval-sexp-fu
       :pin   melpa-stable
       :after (cider eval-sexp-fu))
   #+END_SRC

   Custom key bindings, mostly for clojure but mnemonics prefixes should be usable for all languages, for example:

   | Prefix | Meaning  |
   |--------+----------|
   | SPC e  | Evaluate |
   | SPC l  | Load     |
   | SPC p  | Project  |
   | SPC r  | Refactor |
   | SPC t  | Test     |

   #+BEGIN_SRC emacs-lisp
     (evil-define-key '(normal visual) clojure-mode-map
       " pc"  'cider-connect ;; "connect"
       " ps"  'cider-jack-in ;; "start"
       " rcl" 'clojure-convert-collection-to-list
       " rcm" 'clojure-convert-collection-to-map
       " rcq" 'clojure-convert-collection-to-quoted-list
       " rcs" 'clojure-convert-collection-to-set
       " rcv" 'clojure-convert-collection-to-vector
       " rcp" 'clojure-cycle-privacy
       " rci" 'clojure-cycle-if
       " ril" 'clojure-introduce-let
       " rml" 'clojure-move-to-let
       " rtf" 'clojure-thread-first-all
       " rth" 'clojure-thread
       " rtl" 'clojure-thread-last-all
       " rua" 'clojure-unwind-all
       " ruw" 'clojure-unwind
       " rad" 'cljr-add-declaration
       " rai" 'cljr-add-import-to-ns
       " rar" 'cljr-add-require-to-ns
       " rau" 'cljr-add-use-to-ns
       " rdk" 'cljr-destructure-keys
       " rec" 'cljr-extract-constant
       " red" 'cljr-extract-def
       " rel" 'cljr-expand-let
       " rfe" 'cljr-create-fn-from-example
       " rmf" 'cljr-move-form
       " rpc" 'cljr-project-clean
       " rpf" 'cljr-promote-function
       " rsc" 'cljr-show-changelog
       " rsp" 'cljr-sort-project-dependencies
       " rsr" 'cljr-stop-referring
       " rup" 'cljr-update-project-dependencies)

     (evil-define-key '(normal visual) cider-mode-map
       " el"  'cider-eval-last-sexp
       " en"  'cider-eval-ns-form
       " er"  'cider-eval-region
       " ep"  'cider-eval-sexp-at-point
       " et"  'cider-eval-defun-at-point
       " lb"  'cider-load-buffer
       " lf"  'cider-load-file
       " la"  'cider-load-all-files
       " lp"  'cider-load-all-project-ns
       " ram" 'cljr-add-missing-libspec
       " rap" 'cljr-add-project-dependency
       " ras" 'cljr-add-stubs
       " rcn" 'cljr-clean-ns
       " ref" 'cljr-extract-function
       " rfu" 'cljr-find-usages
       " rhd" 'cljr-hotload-dependency
       " ris" 'cljr-inline-symbol
       " rrf" 'cljr-rename-file-or-dir
       " rrl" 'cljr-remove-let
       " rrs" 'cljr-rename-symbol)
   #+END_SRC

   Hydra menus follow the same rules as the code rules mentioned before, but with a h prefix:

   #+BEGIN_SRC emacs-lisp
     (evil-leader/set-key-for-mode 'clojure-mode
       "hrc" 'hydra-cljr-code-menu/body
       "hrh" 'hydra-cljr-help-menu/body
       "hrn" 'hydra-cljr-ns-menu/body
       "hrp" 'hydra-cljr-project-menu/body
       "hrt" 'hydra-cljr-toplevel-menu/body)
   #+END_SRC

** Scala
   #+BEGIN_SRC emacs-lisp
     (use-package ensime
       :pin melpa-stable
       :init
       (add-to-list 'projectile-project-root-files-bottom-up "build.sbt")
       (setq ensime-search-interface 'ivy
             ensime-startup-notification nil)
       (add-hook 'scala-mode-hook 'ensime-mode)
       (add-hook 'scala-mode-hook 'subword-mode))
   #+END_SRC

** Dart
   #+BEGIN_SRC emacs-lisp
     (use-package dart-mode
       :pin  melpa-stable
       :init
       (add-to-list 'projectile-project-root-files-bottom-up "pubspec.yaml")
       (add-to-list 'projectile-project-root-files-bottom-up "BUILD")
       (setq dart-sdk-path "/usr/local/flutter/bin/cache/dart-sdk/"))
   #+END_SRC

** YAML
   #+BEGIN_SRC emacs-lisp
     (use-package yaml-mode
       :pin  melpa-stable
       :mode (("\\.yml\\'" . yaml-mode)
              ("\\.yaml\\'" . yaml-mode)))
   #+END_SRC

** JSON
   #+BEGIN_SRC emacs-lisp
     (use-package json-mode
       :mode (("\\.json\\.base\\'" . json-mode)))
   #+END_SRC

** Markdown
   #+BEGIN_SRC emacs-lisp
     (use-package markdown-mode
       :pin  melpa-stable
       :mode (("README\\.md\\'" . gfm-mode)
              ("CHANGELOG\\.md\\'" . gfm-mode)
              ("ROADMAP\\.md\\'" . gfm-mode)
              ("\\.md\\'" . markdown-mode))
       :init (setq markdown-command "multimarkdown"))
   #+END_SRC

** Ruby
   #+BEGIN_SRC emacs-lisp
     (use-package enh-ruby-mode
       :pin  melpa-stable
       :mode (("\\.rb\\'" . enh-ruby-mode)
              ("\\.ru\\'" . enh-ruby-mode)
              ("\\.rake\\'" . enh-ruby-mode)
              ("\\.thor\\'" . enh-ruby-mode)
              ("\\.jbuilder\\'" . enh-ruby-mode)
              ("\\.gemspec\\'" . enh-ruby-mode)
              ("\\.podspec\\'" . enh-ruby-mode)
              ("Gemfile\\'" . enh-ruby-mode)
              ("Rakefile\\'" . enh-ruby-mode)
              ("Capfile\\'" . enh-ruby-mode)
              ("Thorfile\\'" . enh-ruby-mode)
              ("Vagrantfile\\'" . enh-ruby-mode)
              ("Guardfile\\'" . enh-ruby-mode)
              ("Podfile\\'" . enh-ruby-mode))
       :init (add-to-list 'projectile-project-root-files-bottom-up "Gemfile"))
   #+END_SRC

* Misc
  - Hide unnecessary stuff
  #+BEGIN_SRC emacs-lisp
    (menu-bar-mode 0)
    (tool-bar-mode 0)
    (scroll-bar-mode 0)
    (setq inhibit-startup-message t)
    (setq initial-scratch-message nil)
  #+END_SRC

  - Graphical tweaks
  #+BEGIN_SRC emacs-lisp
    (when (window-system)
      (set-frame-font "Fira Code"))
  #+END_SRC

  - Disable bell
  #+BEGIN_SRC emacs-lisp
    (setq ring-bell-function 'ignore)
  #+END_SRC

  - Disable lock files
  #+BEGIN_SRC emacs-lisp
    (setq create-lockfiles nil)
  #+END_SRC

  - Disable backup files
  #+BEGIN_SRC emacs-lisp
    (setq make-backup-files nil)
  #+END_SRC

  - Use y/n prompts instead of yes/no
  #+BEGIN_SRC emacs-lisp
    (defalias 'yes-or-no-p 'y-or-n-p)
  #+END_SRC

  - Show line numbers
  #+BEGIN_SRC emacs-lisp
    (global-display-line-numbers-mode t)
    (setq-default display-line-numbers-grow-only t
                  display-line-numbers-widen t
                  display-line-numbers-width 2
                  display-line-numbers-type 'relative)
  #+END_SRC

  - Highlight current line
  #+BEGIN_SRC emacs-lisp
    (global-hl-line-mode t)
  #+END_SRC

  - Smart tabs (indent or complete)
  #+BEGIN_SRC emacs-lisp
    (setq tab-always-indent 'complete)
  #+END_SRC

  - Ensure new line at EOF
  #+BEGIN_SRC emacs-lisp
    (setq require-final-newline t)
  #+END_SRC

  - Mouse
  #+BEGIN_SRC emacs-lisp
    (unless window-system
      ;; Enable mouse
      (xterm-mouse-mode t)

      ;; Set up scroll wheel
      (global-set-key [mouse-4] (lambda ()
                                  (interactive)
                                  (scroll-down 1)))
      (global-set-key [mouse-5] (lambda ()
                                  (interactive)
                                  (scroll-up 1)))

      ;; Enable mouse selection
      (setq mouse-sel-mode t))
  #+END_SRC

  - Write emacs's custom settings to its own file
  #+BEGIN_SRC emacs-lisp
    (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
    (when (file-exists-p custom-file)
      (load custom-file))
  #+END_SRC

  - Disable soft line wrapping
  #+BEGIN_SRC emacs-lisp
    (setq-default truncate-lines 0)
  #+END_SRC

  - Remember last position on files
  #+BEGIN_SRC emacs-lisp
    (save-place-mode t)
  #+END_SRC

  - Leader key
  #+BEGIN_SRC emacs-lisp
    (evil-leader/set-leader ",")

    (evil-leader/set-key
      "mx" 'counsel-M-x
      "o"  'counsel-fzf
      "f"  'counsel-ag
      "b"  'ivy-switch-buffer
      "B"  'ivy-switch-buffer-other-window
      "s"  'cider-scratch)
  #+END_SRC

  - Default indentation
  #+BEGIN_SRC emacs-lisp
    (setq-default indent-tabs-mode nil
                  tab-width 2
                  c-basic-offset 2)
  #+END_SRC

  - Show trailing whitespace
  #+BEGIN_SRC emacs-lisp
    (setq-default show-trailing-whitespace t)
  #+END_SRC

  - Ivy action to open file in other window
  #+BEGIN_SRC emacs-lisp
    (ivy-set-actions
     'counsel-fzf
     '(("O" find-file-other-window "other window")))
  #+END_SRC
